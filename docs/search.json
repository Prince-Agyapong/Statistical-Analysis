[
  {
    "objectID": "eryhemato_squamous_disease.html",
    "href": "eryhemato_squamous_disease.html",
    "title": "Feature Selection and Pathways to Diagnosing Erythemato-Squamous Diseases",
    "section": "",
    "text": "Distinguishing between erythemato-squamous diseases presents a challenge in dermatology. These conditions often share overlapping symptoms such as erythema and scaling, making clinical differentiation difficult. The group includes psoriasis, seborrheic dermatitis, lichen planus, pityriasis rosea, chronic dermatitis, and pityriasis rubra pilaris. While biopsies are frequently used to aid diagnosis, the histopathological characteristics of these diseases are also highly similar. The challenge is further compounded by the fact that, in early stages, one disease may resemble another before its defining features emerge.\nIn this project, patients are assessed on 12 clinical variables and 22 histopathological features obtained through microscopic examination. The objective is to explore these features using statistical and machine learning methods to identify the most informative predictors, improve classification accuracy, and gain insights into distinguishing characteristics of each condition."
  },
  {
    "objectID": "eryhemato_squamous_disease.html#data",
    "href": "eryhemato_squamous_disease.html#data",
    "title": "Feature Selection and Pathways to Diagnosing Erythemato-Squamous Diseases",
    "section": "Data",
    "text": "Data\nThis project uses data on erythemato-squamous diseases sourced from the UCI Machine Learning Repository.\nThe dataset contains 366 patient records with 34 features:\n\nClinical features (12 variables) – Recorded during the patient’s initial examination.\n\nHistopathological features (22 variables) – Obtained from biopsy samples examined under a microscope.\n\nOf the 34 attributes, 33 are numeric (integer-valued) and 1 is categorical (the disease class).\nThe six disease classes are:\n\nPsoriasis\n\nSeborrheic Dermatitis\n\nLichen Planus\n\nPityriasis Rosea\n\nChronic Dermatitis\n\nPityriasis Rubra Pilaris\n\nThe dataset combines both observable symptoms and microscopic tissue characteristics, making it suitable for exploring feature importance and developing pathways for diagnosis without immediate reliance on invasive biopsies.\n\n\nShow Code\nset.seed(123)\ndata &lt;- fetch_ucirepo(id = 33)\ndata &lt;- data$data$original |&gt;\n  mutate(\n    class = factor(class),\n    class_names = recode_factor(\n      class,\n      `1` = \"Psoriasis\",\n      `2` = \"Seboreic Dermatitis\",\n      `3` = \"Lichen Planus\",\n      `4` = \"Pityriasis Rosea\",\n      `5` = \"Cronic Dermatitis\",\n      `6` = \"Pityriasis Rubra Pilaris\"\n    )\n  )\n\ndata\n\n\n\n  \n\n\n\n\nMissing Values\nInspection of the dataset revealed that only the age feature contains missing values.\nAll other clinical and histopathological features are complete.\nThe missing values in age will be addressed using the missForest imputation method.\n\n\nShow Code\ngg_miss_var(data |&gt;\n              select(-class_names)) +\n  labs(title = \"Missing Values per Feature\", x = \"Feature\", y = \"Number Missing\")\n\n\n\n\n\n\n\n\n\n\n\nClass Distribution\nThe dataset contains six types of erythemato-squamous diseases, with the number of cases varying considerably between classes. Psoriasis is the most represented class (112 cases), followed by Lichen Planus (72 cases) and Seboreic Dermatitis (61 cases). Pityriasis Rosea (49 cases) and Cronic Dermatitis (52 cases) have moderate representation, while Pityriasis Rubra Pilaris is the least common with only 20 cases. The imbalance in class sizes is important to consider when building classification models, as it may affect predictive performance.\n\n\nShow Code\ncls_cols &lt;- c(\"#F8766D\", \"#00BA38\", \"#619CFF\", \"#E76BF3\", \"#FFD700\", \"#00C2A0\")\n\nggplot(data, aes(x = class_names, fill = class_names)) +\n  geom_bar(show.legend = FALSE) +\n  scale_fill_manual(values = cls_cols) +\n  geom_text(stat = 'count', aes(label = after_stat(count)), \n            vjust = -0.5,\n            size = 4.5,\n            fontface = \"bold\") +\n  labs(title = \"Class Distribution\", x = \"Disease Class\", y = \"Count\") +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 12),\n    axis.text = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\nAge Distribution Across Disease Classes\nThe plot below illustrates the distribution of patient ages across the six erythemato-squamous disease classes. Examining age differences helps assess whether it may serve as a discriminative feature in the classification task. If certain diseases tend to occur predominantly in specific age ranges, age could provide additional predictive value for diagnosis.\nAge varies across the six erythemato-squamous disease classes.\nMost diseases affect a wide range of ages, while Pityriasis Rubra Pilaris is concentrated in younger patients (mostly under 15 years). This suggests age could be a strong distinguishing factor for this class.\n\n\nShow Code\nggplot(data, aes(x = class_names, y = age, fill = class)) +\n  geom_boxplot(show.legend = FALSE) +\n  labs(title = \"Age Distribution by Disease Class\", x = \"Disease Class\", y = \"Age\") +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 12),\n    axis.text = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\nBetween‑class variance (η²) screening\nη² (eta‑squared) from a one‑way ANOVA estimates the share of a feature’s total variance that’s explained by disease class (range 0–1). Higher η² implies stronger separation across classes which also means more likely to be discriminative. Below, features with η² ≥ 0.70 are highlighted.\n\n\nShow Code\n# helper: eta-squared for one-way ANOVA\neta2_oneway &lt;- function(x, g) {\n  ok &lt;- stats::complete.cases(x, g)\n  x &lt;- x[ok]; g &lt;- droplevels(g[ok])\n  if (length(unique(g)) &lt; 2L || length(x) &lt; 3L) return(NA_real_)\n  fit &lt;- stats::aov(x ~ g)\n  ss  &lt;- anova(fit)[[\"Sum Sq\"]]\n  as.numeric(ss[1] / sum(ss))  # between / total = η²\n}\n\n# compute η² per feature (exclude class columns)\nfeat_names &lt;- setdiff(names(data), c(\"class\", \"class_names\"))\n\nrank_tbl &lt;- tibble(\n  Feature = feat_names,\n  eta2  = map_dbl(feat_names, ~ eta2_oneway(data[[.x]], data$class))\n) |&gt; arrange(desc(eta2))\n\n# keep strong separators\ntop_eta &lt;- filter(rank_tbl, eta2 &gt;= 0.70)\n\nggplot(top_eta, aes(x = reorder(Feature, eta2), y = eta2)) +\n  geom_col(fill = \"forestgreen\") +\n  coord_flip() +\n  labs(\n    title = \"Proportion of variance explained by disease class (0–1)\",\n    x = \"Feature\", y = \"\\u03B7\\u00B2\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 12),\n    axis.text = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )"
  },
  {
    "objectID": "eryhemato_squamous_disease.html#modelling",
    "href": "eryhemato_squamous_disease.html#modelling",
    "title": "Feature Selection and Pathways to Diagnosing Erythemato-Squamous Diseases",
    "section": "Modelling",
    "text": "Modelling\n\nTrain/test split and missing‑data handling\nRecords are first split into an 80/20 train/test partition stratified by class.\nMissing values are then imputed with missForest, a nonparametric random‑forest imputer that handles mixed data types and nonlinear relations. To avoid information leakage, imputation is performed separately for the training and test portions: the training set is imputed on its own; the test set is imputed using a model fitted only on the training distribution by concatenating the features (without the class label), imputing jointly, and then re‑attaching the original test labels. This preserves realistic model evaluation while retaining all rows.\n\n\nShow Code\n# Data prep & imputation\nmod_data &lt;- data |&gt;\n  mutate(class = factor(class),\n         age = as.numeric(age)) |&gt;\n  clean_names() |&gt;\n  select(-class_names)\n\nidx &lt;- createDataPartition(mod_data$class, p = 0.8, list = FALSE)\ntrain_data &lt;- mod_data[idx, ]\ntest_data  &lt;- mod_data[-idx, ]\n\n\nImputed Training Data\n\n\nShow Code\n# Impute training\ntrain_imp &lt;- missForest(train_data)$ximp\ntrain_imp\n\n\n\n  \n\n\n\nImputed Test Data\n\n\nShow Code\n# Impute test\ntmp &lt;- bind_rows(train_data |&gt; select(-matches(\"class\")),\n                 test_data |&gt; select(-matches(\"class\")))\ntmp_imp &lt;- missForest(tmp)$ximp\n\ntest_imp &lt;- cbind(tmp_imp[(nrow(train_data)+1):nrow(tmp_imp), ], class = test_data$class)\ntest_imp\n\n\n\n  \n\n\n\n\n\nRandom Forest Feature Importance\nTwo complementary measures of feature importance are obtained from Random Forest models trained on the imputed training data (500 trees; mtry = √p).\nIn each case, only the top 15 features are shown for clarity.\n\nGini impurity importance – quantifies the average decrease in node impurity (Gini index) contributed by each feature across all splits. Larger values indicate stronger discriminatory power in separating classes.\nPermutation (accuracy reduction) importance – measures the drop in predictive accuracy when a feature’s values are randomly permuted. Larger values indicate a greater loss in model performance, capturing the predictive impact rather than split purity.\n\nTogether, these metrics provide a more complete view of how features contribute to classification:\n- Gini impurity captures how often and effectively a feature is used in tree splits.\n- Permutation importance captures the real performance penalty if the feature’s information is destroyed.\n\n\nShow Code\n# Random Forest (Gini impurity)\nrf_gini &lt;- randomForest(\n  class ~ ., data = train_imp,\n  ntree = 500,\n  mtry = floor(sqrt(ncol(train_imp) - 1)),\n  importance = TRUE\n)\n\nimp_gini &lt;- as.data.frame(randomForest::importance(rf_gini)) |&gt;\n  rownames_to_column(\"Feature\") |&gt;\n  arrange(desc(MeanDecreaseGini)) |&gt;\n  mutate(Method = \"Gini Impurity\")\n\n# Random Forest (Permutation importance)\nrf_perm &lt;- ranger(\n  class ~ ., data = train_imp,\n  num.trees = 500,\n  mtry = floor(sqrt(ncol(train_imp) - 1)),\n  importance = \"permutation\",\n  probability = TRUE\n)\n\nimp_perm &lt;- as.data.frame(rf_perm$variable.importance) |&gt;\n  rownames_to_column(\"Feature\") |&gt;\n  rename(Importance = 2) |&gt;\n  arrange(desc(Importance)) |&gt;\n  mutate(Method = \"Accuracy Reduction\")\n\n# Combine & plot\nimp_gini &lt;- imp_gini |&gt;\n  rename(Importance = MeanDecreaseGini)\n\n\n\n# Gini impurity plot\np1 &lt;- ggplot(imp_gini |&gt; \n               slice(1:15) |&gt;\n               mutate(Feature = str_replace_all(Feature, \"_\", \" \")), \n             aes(x = reorder(Feature, Importance), y = Importance, fill = Method)) +\n  geom_col(show.legend = FALSE,\n           color = \"black\", fill = \"tomato\") +\n  coord_flip() +\n  labs(title = \"(a) Gini Impurity\",\n       x = \"Feature\", y = \"Importance\") +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 12),\n    axis.text = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )\n\n# Accuracy reduction plot\np2 &lt;- ggplot(imp_perm |&gt; \n               slice(1:15) |&gt;\n               mutate(Feature = str_replace_all(Feature, \"_\", \" \")), \n             aes(x = reorder(Feature, Importance), y = Importance, fill = Method)) +\n  geom_col(show.legend = FALSE,\n           color = \"black\", fill = \"forestgreen\") +\n  coord_flip() +\n  labs(title = \"(b) Accuracy Reduction\" ,\n       x = \"Feature\", y = \"Importance\") +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 12),\n    axis.text = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )\n\np1\n\n\n\n\n\n\n\n\n\nShow Code\np2\n\n\n\n\n\n\n\n\n\n\n\nFeature Ranking by Borda’s Method\nTo obtain a unique final classification for evaluation, the two individual rankings were combined using Borda’s method. For each feature \\(f\\), the position in the accuracy decrease ranking \\(p_{1}(f)\\) was added to its position in the Gini impurity ranking \\(p_{2}(f)\\). This sum, referred to as the Borda score, was then used to order the features in ascending order, resulting in the Final Rank. The top 15 features from this aggregated ranking are presented in Table 8.\n\n\nShow Code\ngini_ranked &lt;- imp_gini |&gt;\n  mutate(rank_gini = rank(-Importance, ties.method = \"average\")) |&gt;\n  rename(Importance_Gini = Importance) |&gt;\n  select(Feature, Importance_Gini, rank_gini)\n\nperm_ranked &lt;- imp_perm |&gt;\n  mutate(rank_acc = rank(-Importance, ties.method = \"average\")) |&gt;\n  rename(Importance_Acc = Importance) |&gt;\n  select(Feature, Importance_Acc, rank_acc)\n\n# Combine and compute Borda\nborda_tbl &lt;- gini_ranked |&gt;\n  inner_join(perm_ranked, by = \"Feature\") |&gt;\n  mutate(BordaScore = rank_gini + rank_acc) |&gt;\n  arrange(BordaScore, rank_gini, rank_acc) |&gt;\n  mutate(BordaRank = row_number())\n\n\nborda_tbl |&gt;\n  select(-BordaScore) |&gt;\n  relocate(BordaRank, Feature) |&gt;\n  mutate(Feature = str_replace_all(Feature, \"_\", \" \")) |&gt;\n  slice(1:15)|&gt;\n  rename(\n    `Final rank` = BordaRank,\n    `Accuracy decrease` = Importance_Acc,\n    `Accuracy decrease rank` = rank_acc,\n    `Gini impurity` = Importance_Gini,\n    `Gini impurity rank` = rank_gini\n  ) |&gt;\n  arrange(`Final rank`) |&gt;\n  gt() |&gt;\n  tab_caption(\"Two rankings merged through their position, through the Borda’s method (Top 15)\") |&gt;\n  opt_table_font(font = list(gt::google_font(\"Roboto Condensed\"), default_fonts())) |&gt;\n  opt_table_outline() |&gt;\n  opt_row_striping() |&gt;\n  gt::tab_options(\n    table.font.size = px(14),\n    data_row.padding = px(4),\n    heading.title.font.size = px(16),\n    column_labels.font.weight = \"bold\",\n    column_labels.background.color = \"skyblue\"\n  )\n\n\n\n\n\n\nTwo rankings merged through their position, through the Borda’s method (Top 15)\n\n\nFinal rank\nFeature\nGini impurity\nGini impurity rank\nAccuracy decrease\nAccuracy decrease rank\n\n\n\n\n1\nthinning of the suprapapillary epidermis\n21.944493\n1\n0.10411138\n1\n\n\n2\nfibrosis of the papillary dermis\n19.168355\n2\n0.08452262\n3\n\n\n3\nclubbing of the rete ridges\n19.105806\n3\n0.08920718\n2\n\n\n4\nelongation of the rete ridges\n14.131689\n4\n0.07043133\n4\n\n\n5\nkoebner phenomenon\n13.354693\n5\n0.05341083\n5\n\n\n6\nspongiosis\n10.494810\n6\n0.04793665\n7\n\n\n7\npolygonal papules\n9.875999\n7\n0.04992194\n6\n\n\n8\noral mucosal involvement\n8.641915\n9\n0.04612357\n8\n\n\n9\npnl infiltrate\n9.421040\n8\n0.03857247\n10\n\n\n10\nvacuolisation and damage of the basal layer\n8.194201\n10\n0.03870558\n9\n\n\n11\nmelanin incontinence\n7.855912\n11\n0.02502796\n13\n\n\n12\nsaw tooth appearance of retes\n7.126746\n12\n0.02841774\n12\n\n\n13\nband like infiltrate\n6.621900\n13\n0.03507068\n11\n\n\n14\nfocal hypergranulosis\n6.446642\n14\n0.02256087\n14\n\n\n15\nexocytosis\n5.646224\n17\n0.01668983\n17\n\n\n\n\n\n\n\n\n\nModel Evaluation with Top-k Features\nTo evaluate the performance of the Random Forest (RF) model using only the most important predictors, we selected the top-k features from the Borda ranking list (k = 1 to 15) and assessed the model using Accuracy, MacroAUC, and MacroF1. This step is important because selecting the optimal number of features balances model performance: including too many features risks overfitting and unnecessary complexity, while too few can miss important predictive information. By identifying the smallest k that achieves near-maximum performance, we can improve efficiency, reduce noise, and focus on the most informative variables.\nThe plot below shows that model performance improves rapidly up to around k = 6, after which the gains plateau across all metrics. Therefore, we selected the top 6 features for the final model, as this provides strong predictive performance while maintaining parsimony.\n\n\nShow Code\n# Evaluate RF with top-k features from Borda list\nset.seed(123)\n\n# Filter Borda features to those in data\nborda_tbl &lt;- borda_tbl |&gt;\n  filter(Feature %in% setdiff(names(train_imp), \"class\")) |&gt;\n  arrange(BordaScore)\n\n# Metric helpers\nmacro_f1 &lt;- function(cm) {\n  mean(sapply(rownames(cm), function(cl) {\n    tp &lt;- cm[cl, cl]\n    fp &lt;- sum(cm[, cl]) - tp\n    fn &lt;- sum(cm[cl, ]) - tp\n    p  &lt;- if ((tp+fp)==0) 0 else tp/(tp+fp)\n    r  &lt;- if ((tp+fn)==0) 0 else tp/(tp+fn)\n    if ((p+r)==0) 0 else 2*p*r/(p+r)\n  }), na.rm = TRUE)\n}\n\nmacro_auc &lt;- function(y, probs) {\n  mean(sapply(levels(y), function(cl) {\n    y_bin &lt;- as.numeric(y == cl)\n    as.numeric(roc(y_bin, probs[[cl]], quiet = TRUE)$auc)\n  }), na.rm = TRUE)\n}\n\n# RF evaluation \nfit_eval_rf &lt;- function(train_df, test_df, feats, num.trees = 800) {\n  fml &lt;- reformulate(feats, \"class\")\n  fit &lt;- ranger(\n    fml, data = train_df, num.trees = num.trees,\n    mtry = max(1, floor(sqrt(length(feats)))), probability = TRUE,\n    importance = \"permutation\", seed = 123\n  )\n  probs &lt;- predict(fit, data = test_df)$predictions\n  pred  &lt;- factor(colnames(probs)[max.col(probs)], levels = levels(test_df$class))\n  cm    &lt;- table(test_df$class, pred)\n  \n  tibble(\n    k        = length(feats),\n    Accuracy = mean(pred == test_df$class),\n    MacroF1  = macro_f1(cm),\n    MacroAUC = macro_auc(test_df$class, as.data.frame(probs))\n  )\n}\n\n# subsets \nks &lt;- 1:15\ntopk_list &lt;- setNames(lapply(ks, \\(k) head(borda_tbl$Feature, k)), paste0(\"Top\", ks))\n\n# evaluations \nperf_tbl &lt;- imap_dfr(topk_list, ~ fit_eval_rf(train_imp, test_imp, .x) |&gt; mutate(Subset = .y)) |&gt;\n  arrange(match(Subset, paste0(\"Top\", ks)))\n\nperf_tbl_long &lt;- perf_tbl |&gt;\n  pivot_longer(\n    cols = c(Accuracy, MacroF1, MacroAUC),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\nggplot(perf_tbl_long, aes(x = k, y = Value, color = Metric)) +\n  geom_line(linewidth = 1) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = c(6), linetype = \"dashed\", color = \"grey50\") +\n  scale_x_continuous(breaks = 1:15) +\n  labs(\n    title = \"RF Performance vs Number of Top Features\",\n    x = \"Number of Top Features (k)\",\n    y = \"Metric Value\",\n    color = \"Metric\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_text(size = 12),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 12),\n    axis.text = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\nFinal Selection: Top‑6 Features from the Borda Ranking\nFollowing the top‑k evaluation, the Top‑6 features (lowest Borda scores) are chosen as the compact set for downstream modeling and interpretation. The plot below highlights exactly those six features within the full Borda ranking. A small table is also included for quick reference.\n\n\nShow Code\nborda_plot_df &lt;- borda_tbl |&gt;\n  mutate(Feature = str_replace_all(Feature, \"_\", \" \")) |&gt;\n  arrange(BordaScore) |&gt;       \n  mutate(\n    Feature = factor(Feature, levels = Feature),  \n    Top6 = row_number() &lt;= 6\n  )\n\nggplot(borda_plot_df, aes(x = BordaScore, y = Feature)) +\n  geom_point(size = 2.6, color = \"#3abeff\") +\n  geom_point(data = dplyr::filter(borda_plot_df, Top6),\n             shape = 21, size = 5, stroke = 1.2, color = \"red\", fill = NA) +\n  labs(\n    title = \"Aggregated Feature Rankings (Borda)\",\n    subtitle = \"Lower Borda score = higher overall importance\",\n    x = \"Borda score (sum of ranks)\",\n    y = \"Feature\"\n  ) +\n  expand_limits(x = 0) +\n  theme_bw() +\n  theme(\n    axis.ticks.y = element_blank(),\n    legend.position = \"bottom\",\n    legend.title = element_text(size = 12),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\"),\n    legend.text = element_text(size = 12),\n    axis.text = element_text(size = 12, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\nDecision-Tree Pathways from the Top‑6 Features\nA conditional inference tree (ctree) is trained using only the six features with the lowest Borda scores. This tree yields transparent pathways in the form of if/then rules that map combinations of clinical and histopathological findings to one of the six disease classes. The conditional inference tree provides a structured decision-making process for identifying the most likely disease based on the top six histopathological features. Each split in the tree represents a statistically significant decision point, with p-values confirming the importance of that feature in separating disease classes. The terminal nodes show the dominant disease classification for patients with specific combinations of feature values, allowing us to trace a clear diagnostic path.\nThe classification tree shows that fibrosis of the papillary dermis is the most important initial split, dividing patients into two main groups. Those with low or absent fibrosis are further separated by elongation of the rete ridges, followed by either koebner phenomenon or spongiosis levels, producing distinct subgroups. For example, low koebner phenomenon with minimal spongiosis is associated mainly with Seboreic Dermatitis, while other branches reveal higher proportions of Lichen Planus, Psoriasis, or Pityriasis Rosea. A split based on clubbing of the rete ridges further distinguishes between Psoriasis and Seboreic Dermatitis. On the other side, patients with higher fibrosis are divided by spongiosis level, with lower spongiosis linked predominantly to Cronic Dermatitis and higher spongiosis to Pityriasis Rubra Pilaris. This structure highlights clear, interpretable pathways that connect specific clinical and histopathological features to the six skin disease classes.\n\n\nShow Code\n# Select top 6 features from Borda scores\ntop_features &lt;- borda_plot_df |&gt;\n  arrange(BordaScore) |&gt;\n  slice(1:6) |&gt;\n  pull(Feature)\n\n# Keep only target + top 6 features\ndf_top6 &lt;- data |&gt;\n  select(class, all_of(top_features))\n\n# Tree\nctree_pk &lt;- partykit::ctree(class ~ ., data = df_top6)\n\n# Class mapping \ncls_levels &lt;- levels(df_top6$class)\ncls_names &lt;- c(\n  `1` = \"Psoriasis\",\n  `2` = \"Seboreic Dermatitis\",\n  `3` = \"Lichen Planus\",\n  `4` = \"Pityriasis Rosea\",\n  `5` = \"Cronic Dermatitis\",\n  `6` = \"Pityriasis Rubra Pilaris\"\n)[cls_levels]\n\nnames(cls_cols) &lt;- cls_levels\n\np_text &lt;- function(p) ifelse(is.na(p), \"\", ifelse(p &lt; 0.001, \"p &lt; 0.001\", sprintf(\"p = %.3f\", p)))\n\n# Tree\np_tree  &lt;-  ggparty(ctree_pk) +\n  geom_edge() +\n  geom_edge_label(size = 4) +\n  geom_node_splitvar(\n    ids = \"inner\",\n    aes(label = paste0(splitvar, \"\\n\", p_text(p.value))),\n    fill = \"lightblue\", color = \"black\", size = 4\n  ) +\n  geom_node_plot(\n    ids = \"terminal\",\n    gglist = list(\n      geom_bar(aes(x = factor(1), fill = class),\n               stat = \"count\", position = \"fill\", width = 0.9),\n      scale_fill_manual(values = cls_cols, labels = cls_names, name = \"Class\"),\n      scale_x_discrete(labels = NULL, breaks = NULL),\n      labs(x = NULL, y = NULL),\n      theme_void(),\n  theme(\n    axis.ticks.y = element_blank(),\n    axis.text = element_text(size = 10, face = \"bold\")\n  )\n    )\n  ) +\n  geom_node_label(\n    aes(label = paste0(\"n = \", nodesize)),\n    nudge_y = -0.04, size = 3,\n    label.r = unit(0.15, \"lines\"),\n    fill = \"white\"\n  ) +\n  theme_void(base_size = 12) +\n  labs(title = \"Pathways (Top 6 Features)\",\n       x = \"\",\n       y = \"\") +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 14, face = \"bold\")\n  )\n\nleg_df &lt;- data.frame(\n  class = factor(cls_levels, levels = cls_levels),\n  name  = unname(cls_names[cls_levels])  \n)\n\nlegend_strip &lt;-\n  ggplot(leg_df, aes(x = class, y = 1, fill = class)) +\n  geom_tile(height = 0.7, width = 0.9) +\n  geom_text(aes(label = name), vjust = 0.5, hjust = 0.5, size = 3.3,\n            color = \"black\", fontface = \"bold\") +\n  scale_fill_manual(values = cls_cols, guide = \"none\") +\n  scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +\n  scale_y_continuous(limits = c(0.5, 1.5)) +\n  theme_void() \n\n\nfinal_plot &lt;- p_tree / legend_strip + plot_layout(heights = c(1, 0.12))\nfinal_plot"
  },
  {
    "objectID": "eryhemato_squamous_disease.html#conclusion",
    "href": "eryhemato_squamous_disease.html#conclusion",
    "title": "Feature Selection and Pathways to Diagnosing Erythemato-Squamous Diseases",
    "section": "Conclusion",
    "text": "Conclusion\nUsing the top six features identified by the aggregated Borda ranking, a classification tree was constructed to visualize key decision pathways. This model highlights the most influential variables and their hierarchical relationships, providing interpretable rules for distinguishing between the six skin disease classes."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Prince Agyapong",
    "section": "",
    "text": "Welcome to my portfolio of statistical analysis projects. I specialize in clinical trial data and health analytics."
  },
  {
    "objectID": "cardiox_site_reliability.html",
    "href": "cardiox_site_reliability.html",
    "title": "Site Reliability Analysis in Hypertension Treatment Clinical Trial",
    "section": "",
    "text": "Introduction\nThis project explores site-level reliability using a synthetic dataset modeled after a Phase III randomized controlled trial evaluating the efficacy of a hypertension treatment (CardioX) compared to an active comparator and placebo. The dataset includes 1,000 patients enrolled across 50 trial sites, with comprehensive data on demographics, blood pressure, cholesterol levels, dropout rates, and adverse events. The dataset used in this project is publicly available on Kaggle.\n\n\nAnalysis\n\n\nRates and Ranks\nTo begin the assessment of site reliability, average rates or values were calculated for each risk factor at every clinical trial site. These included the average dropout rate, adverse event (AE) rate, and average measurements of systolic blood pressure, diastolic blood pressure, and cholesterol level.\nEach site was ranked based on its performance across the selected risk factors. Rankings were assigned in descending order so that sites with better performance (lower risk) received higher rank values, and sites with poorer performance (higher risk) received lower rank values. Tied values were given the average of their ranks. The ranking process was applied separately for dropout rate, adverse event rate, average systolic blood pressure, average diastolic blood pressure, and average cholesterol level.\n\n\nShow Code\n# Rank each metric\nsite_ranked &lt;- site_summary %&gt;%\n  mutate(\n    Dropout_Rank = rank(-Dropout_Rate, ties.method = \"average\", na.last = \"keep\"),\n    AE_Rank = rank(-AE_Rate, ties.method = \"average\", na.last = \"keep\"),\n    Systolic_Rank = rank(-Systolic_Mean, ties.method = \"average\", na.last = \"keep\"),\n    Diastolic_Rank = rank(-Diastolic_Mean, ties.method = \"average\", na.last = \"keep\"),\n    Cholesterol_Rank = rank(-Cholesterol_Mean, ties.method = \"average\", na.last = \"keep\")\n  )\n\n# Convert to long format\nrank_long &lt;- site_ranked %&gt;%\n  select(Site_ID, ends_with(\"_Rank\")) %&gt;%\n  pivot_longer(\n    cols = ends_with(\"_Rank\"),\n    names_to = \"RF\",\n    values_to = \"Rank_Value\"\n  ) %&gt;%\n  mutate(\n    RF = case_when(\n      RF == \"Dropout_Rank\" ~ \"Dropout Rate\",\n      RF == \"AE_Rank\" ~ \"Adverse Event Rate\",\n      RF == \"Systolic_Rank\" ~ \"Average Systolic BP\",\n      RF == \"Diastolic_Rank\" ~ \"Average Diastolic BP\",\n      RF == \"Cholesterol_Rank\" ~ \"Average Cholesterol Level\",\n      TRUE ~ RF\n    )\n  )\n\nrank_long\n\n\n\n  \n\n\n\nAn overall rank was calculated for each site by averaging its ranks across all five risk factors. This average rank provides a composite indicator of site performance, allowing for a unified comparison of site-level data quality and reliability.\n\n\nShow Code\n# Compute average rank per site\navg_rank &lt;- rank_long %&gt;%\n  group_by(Site_ID) %&gt;%\n  summarise(Rank_Value = mean(Rank_Value, na.rm = TRUE), .groups = \"drop\")\n\navg_rank\n\n\n\n  \n\n\n\n\n\nK-means Clustering\nTo determine the optimal number of site clusters, the average silhouette width was calculated for K values ranging from 2 to 10. The silhouette method evaluates how well each site fits within its assigned cluster, with higher values indicating better cohesion and separation. The plot showed that \\(K=3\\) yielded the highest average silhouette width, suggesting three distinct clusters best represent the variation in average site ranks.\n\n\nShow Code\n# K means clustering \nset.seed(117)\n# Function to calculate average silhouette width\ncalculate_silhouette &lt;- function(k) {\n  kmeans_result &lt;- kmeans(avg_rank$Rank_Value, centers = k, nstart = 10)\n  sil &lt;- silhouette(kmeans_result$cluster, dist(avg_rank$Rank_Value))\n  mean(sil[, \"sil_width\"])\n}\n\n# Compute silhouette scores for k = 2 to 10\nk_values &lt;- 2:10\nsilhouette_scores &lt;- sapply(k_values, calculate_silhouette)\n\n# Create a data frame for plotting\nsil_df &lt;- data.frame(\n  K = k_values,\n  Silhouette = silhouette_scores\n)\n\n# Plot using ggplot2\nggplot(sil_df, aes(x = K, y = Silhouette)) +\n  geom_line(linewidth = 1) +\n  geom_point(color = \"red\", size = 3) +\n  labs(\n    title = \"Silhouette Plot: Optimal Number of Clusters\",\n    x = \"Number of Clusters (K)\",\n    y = \"Average Silhouette Width\"\n  ) +\n  scale_x_continuous(breaks = 2:10) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nShow Code\n# Run k-means\nkmeans_result &lt;- kmeans(avg_rank$Rank_Value, centers = 3, nstart = 10)\n\n# Create a lookup table for cluster centers and risk labels\ncluster_labels &lt;- tibble(\n  cluster = 1:3,\n  center = as.numeric(kmeans_result$centers)) %&gt;%\n  arrange(desc(center)) %&gt;%\n  mutate(site_risk = c(\"Low\", \"Medium\", \"High\"))\n\n# Attach cluster and site_risk to avg_rank\navg_rank &lt;- avg_rank %&gt;%\n  mutate(cluster = kmeans_result$cluster) %&gt;%\n  left_join(cluster_labels, by = \"cluster\")  \n\np &lt;- ggplot(avg_rank, aes(x = Rank_Value, fill = factor(site_risk, levels = c(\"Low\", \"Medium\", \"High\")))) +\n  geom_histogram(binwidth = 2, alpha = 0.6, color = \"black\") +\n  geom_vline(data = cluster_labels, aes(xintercept = center), \n             linetype = \"dashed\", color = \"black\", size = 1) +\n  scale_fill_manual(values = c(\"High\" = \"red\", \"Medium\" = \"blue\", \"Low\" = \"forestgreen\")) +\n  labs(title = \"K-Means Clustering on Average Rank\",\n       x = \"Average Rank Value\",\n       y = \"Number of Sites\",\n       fill = \"Site Risk\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\nSites were clustered using k-means based on their average rank across risk factors, where higher ranks indicate better site performance. After clustering, risk labels were assigned in descending order of the cluster centers: the cluster with the highest average rank was labeled Low risk, followed by Medium, and the cluster with the lowest average rank labeled High risk.\nThus, Low-risk sites had the highest average ranks, suggesting consistently favorable performance across the ranked metrics. In contrast, High-risk sites had the lowest average ranks, indicating potential concerns such as underreporting, protocol non-adherence, or other data integrity issues\n\n\n\n\n\nHistogram of average site rankings. Dashed vertical lines indicate k-means cluster centers used to assign site risk levels (Low, Medium, High).\n\n\n\n\n\n\nShow Code\ndf_with_risk &lt;- df |&gt;\n  left_join(avg_rank |&gt;\n              select(Site_ID, site_risk),\n            by = \"Site_ID\") \n\nrates_dat &lt;- site_summary |&gt;\n  left_join(avg_rank |&gt;\n              select(site_risk, Site_ID),\n            by = \"Site_ID\") |&gt;\n  pivot_longer(cols = 2:6,\n               names_to = \"RF\",\n               values_to = \"Value\") |&gt;\n  mutate(RF = case_when(\n    RF == \"Dropout_Rate\" ~ \"Dropout Rate\",\n    RF == \"AE_Rate\" ~ \"Adverse Event Rate\",\n    RF == \"Systolic_Mean\" ~ \"Average Systolic BP\",\n    RF == \"Diastolic_Mean\" ~ \"Average Diastolic BP\",\n    RF == \"Cholesterol_Mean\" ~ \"Average Cholesterol Level\",\n    TRUE ~ RF\n  )) |&gt; \n  mutate(site_risk = factor(site_risk, levels = c(\"Low\", \"Medium\", \"High\")))\n  \n\n# Density Plots \n\ndensity_plots &lt;- rates_dat %&gt;%\n  split(.$RF) %&gt;%\n  map(~ ggplot(.x, aes(x = Value, fill = site_risk)) +\n        geom_density(alpha = 0.3, color = NA) +\n        scale_fill_manual(values = c(\n          \"High\" = \"red\", \"Medium\" = \"blue\", \"Low\" = \"forestgreen\"   \n        )) +\n        labs(\n          x = unique(.x$RF),\n          y = \"Density\",\n          fill = \"Site Risk\"\n        ) +\n        theme_bw() +\n        theme(\n          legend.position = \"bottom\",\n          legend.title = element_text(size = 14, face = \"bold\"),\n          legend.text = element_text(size = 12),\n          axis.text = element_text(size = 12, face = \"bold\"),\n          axis.title = element_text(size = 14, face = \"bold\"),\n          plot.title = element_blank()\n        )\n  ) \n\n\n\n\nDistributional Analysis of Data Anomalies Using Risk Factors\n1. Dropout Rate\nSites classified as high risk exhibit higher dropout rates than those categorized as medium or low risk. This trend may reflect challenges related to participant engagement or site operations, potentially impacting retention and overall study quality.\n\n\n\n\n\n\n\n\n\n2. Adverse Event Rate\nAdverse event rates are skewed higher for high risk sites, with some reporting unusually elevated rates. This could point to over-reporting, inconsistent AE definitions, or poor protocol adherence, which are often signs of unreliable data.\n\n\n\n\n\n\n\n\n\n3. Average Systolic BP\nHigh-risk sites report higher and more variable average systolic blood pressure levels. Although elevated BP is expected in this population, the degree of variation and inflation at high-risk sites may suggest inadequate blood pressure control, protocol non-adherence, or measurement inconsistencies. In contrast, lower-risk sites show more consistent and moderate readings, suggesting more reliable data capture.\n\n\n\n\n\n\n\n\n\n4. Average Diastolic BP\nHigh-risk sites report higher and more variable average diastolic blood pressure readings. This wider spread may indicate inconsistent measurement techniques, protocol deviations, or site-level data quality concerns, similar to the systolic BP findings.\n\n\n\n\n\n\n\n\n\n5. Average Cholesterol Level\nCholesterol levels appear elevated and right-shifted at high-risk sites compared to others. This pattern may indicate potential lab calibration issues, data entry errors, or differences in patient selection, such as enrolling individuals with higher baseline cardiovascular risk.\n\n\n\n\n\n\n\n\n\n\n\nSummary Statistics of Risk Factors\nHigh vs Low\nLow-risk sites had significantly higher rank values than high-risk sites for systolic blood pressure (mean difference = 24.83, p &lt; 0.001) and adverse event rate (mean difference = 19.79, p &lt; 0.001). These large and statistically significant differences suggest that low-risk sites are much more consistent in their reporting of expected clinical patterns or completeness. The lower ranks at high-risk sites point to potential underreporting or data quality issues that may compromise the reliability of the information collected at those locations.\n\n\nShow Code\n# Create summary tables for  risk factor (RF)\n# comparisons across site risk groups: High vs Low, Medium vs Low, High vs Medium\n# Risk factors: High vs Low\nrfs &lt;- unique(rfs_data$RF)\n\nhl_rfs &lt;- map2_dfr(\n  rfs,\n  seq_along(rfs),\n  function(rf, i) {\n    tbl &lt;- summary_statistics(\n      dsin = rfs_data |&gt; \n        filter(RF == rf, site_risk %in% c(\"High\", \"Low\")) |&gt; \n        mutate(site_risk = factor(site_risk, levels = c(\"High\", \"Low\"))),\n      numvars = \"Rank_Value\",\n      by = \"RF\",\n      group = \"site_risk\",\n      mean_diffs = TRUE,\n      ci_diffs = TRUE,\n      pval_diffs = TRUE,\n      overall = FALSE\n    ) |&gt;\n      mutate(RF = if_else(STAT == \"N\", RF, \"\")) |&gt;\n      select(-c(VARIABLE, VARTYPE, STATORD))\n    \n    if (i &lt; length(rfs)) {\n      blank_row &lt;- tbl[1, ] |&gt; mutate(across(everything(), ~ \"\"))\n      bind_rows(tbl, blank_row)\n    } else {\n      tbl\n    }\n  }\n)\n\nhl_rfs |&gt; \n  gt() |&gt; \n  cols_label(\n    STAT = \"Statistic\",\n    RF = \"Risk Factor\",\n    Low = \"Low Risk\",\n    High = \"High Risk\"\n  ) |&gt; \n  tab_caption(\"Comparison of Summary Statistics for Low and High Risk Sites\") |&gt;\n  opt_table_font(font = list(gt::google_font(\"Roboto Condensed\"), default_fonts())) |&gt;\n  opt_table_outline() |&gt;\n  opt_row_striping() |&gt;\n  tab_options(\n    table.font.size = px(14),\n    data_row.padding = px(4),\n    heading.title.font.size = px(16),\n    column_labels.font.weight = \"bold\",\n    column_labels.background.color = \"skyblue\"\n  )\n\n\n\n\n\n\nComparison of Summary Statistics for Low and High Risk Sites\n\n\nRisk Factor\nStatistic\nHigh Risk\nLow Risk\n\n\n\n\nDropout Rate\nN\n12\n10\n\n\n\nMean (SD)\n19.79 (16.23)\n36.20 (9.98)\n\n\n\nMedian\n15.75\n39.50\n\n\n\n(Q1, Q3)\n7.50, 25.62\n30.88, 43.50\n\n\n\nMin, Max\n1.00, 49.00\n18.50, 46.00\n\n\n\nMean Difference\n\n16.41 (5.90)\n\n\n\n95% CI of Difference\n\n-28.71, -4.11\n\n\n\nDifference p-value\n\n0.012\n\n\n\n\n\n\n\n\nAdverse Event Rate\nN\n12\n10\n\n\n\nMean (SD)\n14.96 (10.96)\n34.75 (11.36)\n\n\n\nMedian\n13.75\n34.75\n\n\n\n(Q1, Q3)\n7.50, 18.25\n26.88, 42.75\n\n\n\nMin, Max\n1.00, 38.00\n14.00, 50.00\n\n\n\nMean Difference\n\n19.79 (4.77)\n\n\n\n95% CI of Difference\n\n-29.74, -9.84\n\n\n\nDifference p-value\n\n&lt;0.001\n\n\n\n\n\n\n\n\nAverage Systolic BP\nN\n12\n10\n\n\n\nMean (SD)\n15.67 (11.70)\n40.50 (7.00)\n\n\n\nMedian\n12.00\n40.00\n\n\n\n(Q1, Q3)\n7.75, 21.00\n35.25, 46.75\n\n\n\nMin, Max\n3.00, 45.00\n31.00, 50.00\n\n\n\nMean Difference\n\n24.83 (4.22)\n\n\n\n95% CI of Difference\n\n-33.65, -16.02\n\n\n\nDifference p-value\n\n&lt;0.001\n\n\n\n\n\n\n\n\nAverage Diastolic BP\nN\n12\n10\n\n\n\nMean (SD)\n17.67 (12.88)\n35.20 (11.20)\n\n\n\nMedian\n15.50\n38.50\n\n\n\n(Q1, Q3)\n8.75, 24.25\n31.25, 41.50\n\n\n\nMin, Max\n2.00, 45.00\n14.00, 49.00\n\n\n\nMean Difference\n\n17.53 (5.20)\n\n\n\n95% CI of Difference\n\n-28.39, -6.68\n\n\n\nDifference p-value\n\n0.003\n\n\n\n\n\n\n\n\nAverage Cholesterol Level\nN\n12\n10\n\n\n\nMean (SD)\n19.17 (12.12)\n33.70 (14.86)\n\n\n\nMedian\n19.00\n38.50\n\n\n\n(Q1, Q3)\n10.75, 27.75\n26.75, 44.75\n\n\n\nMin, Max\n1.00, 38.00\n5.00, 50.00\n\n\n\nMean Difference\n\n14.53 (5.75)\n\n\n\n95% CI of Difference\n\n-26.52, -2.54\n\n\n\nDifference p-value\n\n0.020\n\n\n\n\n\n\n\nMedium vs Low\nSystolic blood pressure (mean difference = 16.14, p = 0.001) and dropout rate (mean difference = 12.08, p = 0.015) ranked significantly higher at low-risk sites than at medium-risk sites. This indicates that low-risk sites again show greater data completeness or capture clinical variation more accurately. Medium-risk sites may fall somewhere in between, with more plausible values than high-risk sites but still some signs of inconsistency or incompleteness.\n\n\nShow Code\n# Risk factors: Medium vs Low\nml_rfs &lt;- map2_dfr(\n  rfs,\n  seq_along(rfs),\n  function(rf, i) {\n    tbl &lt;- summary_statistics(\n      dsin = rfs_data |&gt; \n        filter(RF == rf, site_risk %in% c(\"Medium\", \"Low\")) |&gt; \n        mutate(site_risk = factor(site_risk, levels = c(\"Medium\", \"Low\"))),\n      numvars = \"Rank_Value\",\n      by = \"RF\",\n      group = \"site_risk\",\n      mean_diffs = TRUE,\n      ci_diffs = TRUE,\n      pval_diffs = TRUE,\n      overall = FALSE\n    ) |&gt;\n      mutate(RF = if_else(STAT == \"N\", RF, \"\")) |&gt;\n      select(-c(VARIABLE, VARTYPE, STATORD))\n    \n    if (i &lt; length(rfs)) {\n      blank_row &lt;- tbl[1, ] |&gt; mutate(across(everything(), ~ \"\"))\n      bind_rows(tbl, blank_row)\n    } else {\n      tbl\n    }\n  }\n)\n\nml_rfs |&gt; \n  gt() |&gt; \n  cols_label(\n    STAT = \"Statistic\",\n    RF = \"Risk Factor\",\n    Low = \"Low Risk\",\n    Medium = \"Medium Risk\"\n  ) |&gt; \n  tab_caption(\"Comparison of Summary Statistics for Low and Medium Risk Sites\") |&gt;\n  opt_table_font(font = list(gt::google_font(\"Roboto Condensed\"), default_fonts())) |&gt;\n  opt_table_outline() |&gt;\n  opt_row_striping() |&gt;\n  tab_options(\n    table.font.size = px(14),\n    data_row.padding = px(4),\n    heading.title.font.size = px(16),\n    column_labels.font.weight = \"bold\",\n    column_labels.background.color = \"skyblue\"\n  )\n\n\n\n\n\n\nComparison of Summary Statistics for Low and Medium Risk Sites\n\n\nRisk Factor\nStatistic\nMedium Risk\nLow Risk\n\n\n\n\nDropout Rate\nN\n28\n10\n\n\n\nMean (SD)\n24.12 (13.64)\n36.20 (9.98)\n\n\n\nMedian\n25.50\n39.50\n\n\n\n(Q1, Q3)\n13.38, 34.50\n30.88, 43.50\n\n\n\nMin, Max\n2.00, 49.00\n18.50, 46.00\n\n\n\nMean Difference\n\n12.08 (4.72)\n\n\n\n95% CI of Difference\n\n-21.66, -2.49\n\n\n\nDifference p-value\n\n0.015\n\n\n\n\n\n\n\n\nAdverse Event Rate\nN\n28\n10\n\n\n\nMean (SD)\n26.71 (14.52)\n34.75 (11.36)\n\n\n\nMedian\n27.00\n34.75\n\n\n\n(Q1, Q3)\n15.88, 40.25\n26.88, 42.75\n\n\n\nMin, Max\n2.00, 48.00\n14.00, 50.00\n\n\n\nMean Difference\n\n8.04 (5.08)\n\n\n\n95% CI of Difference\n\n-18.34, 2.27\n\n\n\nDifference p-value\n\n0.123\n\n\n\n\n\n\n\n\nAverage Systolic BP\nN\n28\n10\n\n\n\nMean (SD)\n24.36 (13.63)\n40.50 (7.00)\n\n\n\nMedian\n24.50\n40.00\n\n\n\n(Q1, Q3)\n14.75, 34.75\n35.25, 46.75\n\n\n\nMin, Max\n1.00, 49.00\n31.00, 50.00\n\n\n\nMean Difference\n\n16.14 (4.54)\n\n\n\n95% CI of Difference\n\n-25.34, -6.94\n\n\n\nDifference p-value\n\n0.001\n\n\n\n\n\n\n\n\nAverage Diastolic BP\nN\n28\n10\n\n\n\nMean (SD)\n25.39 (14.63)\n35.20 (11.20)\n\n\n\nMedian\n26.50\n38.50\n\n\n\n(Q1, Q3)\n14.25, 36.25\n31.25, 41.50\n\n\n\nMin, Max\n1.00, 50.00\n14.00, 49.00\n\n\n\nMean Difference\n\n9.81 (5.10)\n\n\n\n95% CI of Difference\n\n-20.16, 0.54\n\n\n\nDifference p-value\n\n0.063\n\n\n\n\n\n\n\n\nAverage Cholesterol Level\nN\n28\n10\n\n\n\nMean (SD)\n25.29 (14.47)\n33.70 (14.86)\n\n\n\nMedian\n25.50\n38.50\n\n\n\n(Q1, Q3)\n12.75, 36.75\n26.75, 44.75\n\n\n\nMin, Max\n3.00, 49.00\n5.00, 50.00\n\n\n\nMean Difference\n\n8.41 (5.37)\n\n\n\n95% CI of Difference\n\n-19.30, 2.47\n\n\n\nDifference p-value\n\n0.126\n\n\n\n\n\n\n\nMedium vs High\nAdverse event rate had a significant mean difference in ranks between medium-risk and high-risk sites (11.76, p = 0.017), favoring medium-risk sites. Although the differences in systolic and diastolic blood pressure ranks (8.69 and 7.73, respectively) were not statistically significant, they still suggest a trend toward more complete reporting at medium-risk sites compared to high-risk ones.\n\n\nShow Code\n# Risk factors: High vs Medium\nmh_rfs &lt;- map2_dfr(\n  rfs,\n  seq_along(rfs),\n  function(rf, i) {\n    tbl &lt;- summary_statistics(\n      dsin = rfs_data |&gt; \n        filter(RF == rf, site_risk %in% c(\"High\", \"Medium\")) |&gt; \n        mutate(site_risk = factor(site_risk, levels = c(\"High\", \"Medium\"))),\n      numvars = \"Rank_Value\",\n      by = \"RF\",\n      group = \"site_risk\",\n      mean_diffs = TRUE,\n      ci_diffs = TRUE,\n      pval_diffs = TRUE,\n      overall = FALSE\n    ) |&gt;\n      mutate(RF = if_else(STAT == \"N\", RF, \"\")) |&gt;\n      select(-c(VARIABLE, VARTYPE, STATORD))\n    \n    if (i &lt; length(rfs)) {\n      blank_row &lt;- tbl[1, ] |&gt; mutate(across(everything(), ~ \"\"))\n      bind_rows(tbl, blank_row)\n    } else {\n      tbl\n    }\n  }\n)\n\n\nmh_rfs |&gt;\n  gt() |&gt;\n  cols_label(\n    STAT = \"Statistic\",\n    RF = \"Risk Factor\",\n    High = \"High Risk\",\n    Medium = \"Medium Risk\"\n  ) |&gt;\n  tab_caption(\"Comparison of Summary Statistics for Medium and High Risk Sites\") |&gt;\n  opt_table_font(font = list(gt::google_font(\"Roboto Condensed\"), default_fonts())) |&gt;\n  opt_table_outline() |&gt;\n  opt_row_striping() |&gt;\n  tab_options(\n    table.font.size = px(14),\n    data_row.padding = px(4),\n    heading.title.font.size = px(16),\n    column_labels.font.weight = \"bold\",\n    column_labels.background.color = \"skyblue\"\n  )\n\n\n\n\n\n\nComparison of Summary Statistics for Medium and High Risk Sites\n\n\nRisk Factor\nStatistic\nHigh Risk\nMedium Risk\n\n\n\n\nDropout Rate\nN\n12\n28\n\n\n\nMean (SD)\n19.79 (16.23)\n24.12 (13.64)\n\n\n\nMedian\n15.75\n25.50\n\n\n\n(Q1, Q3)\n7.50, 25.62\n13.38, 34.50\n\n\n\nMin, Max\n1.00, 49.00\n2.00, 49.00\n\n\n\nMean Difference\n\n4.33 (4.98)\n\n\n\n95% CI of Difference\n\n-14.42, 5.75\n\n\n\nDifference p-value\n\n0.390\n\n\n\n\n\n\n\n\nAdverse Event Rate\nN\n12\n28\n\n\n\nMean (SD)\n14.96 (10.96)\n26.71 (14.52)\n\n\n\nMedian\n13.75\n27.00\n\n\n\n(Q1, Q3)\n7.50, 18.25\n15.88, 40.25\n\n\n\nMin, Max\n1.00, 38.00\n2.00, 48.00\n\n\n\nMean Difference\n\n11.76 (4.69)\n\n\n\n95% CI of Difference\n\n-21.25, -2.27\n\n\n\nDifference p-value\n\n0.017\n\n\n\n\n\n\n\n\nAverage Systolic BP\nN\n12\n28\n\n\n\nMean (SD)\n15.67 (11.70)\n24.36 (13.63)\n\n\n\nMedian\n12.00\n24.50\n\n\n\n(Q1, Q3)\n7.75, 21.00\n14.75, 34.75\n\n\n\nMin, Max\n3.00, 45.00\n1.00, 49.00\n\n\n\nMean Difference\n\n8.69 (4.52)\n\n\n\n95% CI of Difference\n\n-17.84, 0.46\n\n\n\nDifference p-value\n\n0.062\n\n\n\n\n\n\n\n\nAverage Diastolic BP\nN\n12\n28\n\n\n\nMean (SD)\n17.67 (12.88)\n25.39 (14.63)\n\n\n\nMedian\n15.50\n26.50\n\n\n\n(Q1, Q3)\n8.75, 24.25\n14.25, 36.25\n\n\n\nMin, Max\n2.00, 45.00\n1.00, 50.00\n\n\n\nMean Difference\n\n7.73 (4.88)\n\n\n\n95% CI of Difference\n\n-17.61, 2.16\n\n\n\nDifference p-value\n\n0.122\n\n\n\n\n\n\n\n\nAverage Cholesterol Level\nN\n12\n28\n\n\n\nMean (SD)\n19.17 (12.12)\n25.29 (14.47)\n\n\n\nMedian\n19.00\n25.50\n\n\n\n(Q1, Q3)\n10.75, 27.75\n12.75, 36.75\n\n\n\nMin, Max\n1.00, 38.00\n3.00, 49.00\n\n\n\nMean Difference\n\n6.12 (4.77)\n\n\n\n95% CI of Difference\n\n-15.78, 3.54\n\n\n\nDifference p-value\n\n0.208\n\n\n\n\n\n\n\n\n\nConclusion\nThe rank-based analysis demonstrates that low-risk sites consistently outperformed others in terms of data quality, achieving notably higher ranks across key clinical metrics. Medium-risk sites also performed better than high-risk sites, especially in the reporting of adverse events. These findings support the validity of the site classification and suggest that high-risk sites may be affected by protocol deviations, underreporting, or other operational issues that compromise data reliability.\n\n\nRecommendations\n\nTargeted monitoring should be considered for high-risk sites to investigate possible causes of poor data quality.\nSite retraining or audits may help reinforce protocol adherence and improve reporting accuracy.\nContinuous rank-based surveillance can be incorporated into risk-based monitoring workflows to proactively flag emerging issues.\nFurther investigation into operational challenges at high-risk sites may offer insights to prevent similar issues in future trials."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hi there! I’m Prince Agyapong, a statistician who enjoys turning messy clinical data into clean, meaningful insights that help move science forward.\nMy journey started with a Bachelor’s degree in Statistics from the University of Ghana, followed by a Master’s degree in Statistics from South Dakota State University, where I spent just as much time wrangling R code as I did tutoring students and diving deep into health data.\nToday, I’m working as a Statistician at Pentara Corporation, where I spend my days reviewing statistical analysis plans, building datasets, and crafting the tables and plots that power regulatory submissions. I love the challenge of working on both early-phase and late-phase clinical trials.\nBefore joining industry, I led a meta-analysis exploring how social determinants impact mortality in end-stage kidney disease. I also taught college algebra (yes, the part where students either thank you or cry a little).\nIn short, I’m passionate about combining solid statistical methods with good communication and clean code. My goal is to help bring better treatments to the people who need them.\nWant to know more? Check out my projects or find me on LinkedIn."
  }
]